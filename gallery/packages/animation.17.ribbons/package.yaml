version: v1
metadata:
  name: Ribbons
  description: So many layers of ribbons
  author: Ben Matthews
  source: https://codepen.io/tsuhre/pen/MNVYdq
parameters:
  - name: walkingSpeed
    type: number
    default: 0.5
    description: Movement speed of ribbons (0.1-1.0)
  - name: ribbonWidth
    type: number
    default: 200
    description: Width of ribbons (50-400)
  - name: noiseScale
    type: number
    default: 0.02
    description: Noise pattern scale (0.01-0.1)
  - name: noiseHeight
    type: number
    default: 200
    description: Noise amplitude (50-400)
  - name: numRibbons
    type: number
    default: 5
    description: Number of ribbons (1-10)
  - name: maxSteps
    type: number
    default: 5000
    description: Animation duration (1000-10000)
template: >
  <script
  src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.min.js"></script>


  <style>
    * {
      margin: 0;
      padding: 0;
    }
    html,
    body {
      width: 100%;
      height: 100%;
      overflow: hidden;
    }
    canvas {
      display: block;
    }
    #controls {
      margin: 20px;
      position: absolute;
      top: 0;
      left: 0;
      color: white;
    }
  </style>

  <div id="controls"></div>

  <script>
    let walkingSpeed = {{param:walkingSpeed}};
    let noiseSpeed = 0.4 * walkingSpeed;
    let dirIncr = 0.01 * walkingSpeed;

    let changeChance = 0.05 * walkingSpeed;
    let angleChance = 0.01 * walkingSpeed;

    let ribbonWidth = {{param:ribbonWidth}};

    let angleIncr = 0.01 * walkingSpeed;

    let noiseScale = {{param:noiseScale}};
    let noiseHeight = {{param:noiseHeight}};

    let hueShift = 0.001 * walkingSpeed;

    let steps = 0;
    let stepsPerFrame = 20;
    let maxSteps = {{param:maxSteps}};

    let numRibbons = {{param:numRibbons}};

    class Walker {
      constructor(x, y, hue) {
        this.x = x;
        this.y = y;
        this.z = 0;
        this.dir = random(TAU);
        this.dirMod = random() < 0.5 ? 1 : -1;
        this.angleMod = random() < 0.5 ? 1 : -1;
        this.angle = random(-PI, PI);
        this.hue = hue;
        this.hueMod = 0;
      }
      update() {
        this.x += cos(this.dir) * walkingSpeed;
        this.y += sin(this.dir) * walkingSpeed;
        this.dir += this.dirMod * dirIncr;
        if (random() < changeChance) {
          this.dirMod = random() < 0.5 ? 1 : -1;
        }
        if (random() < angleChance) {
          this.angleMod = random() < 0.5 ? 1 : -1;
        }

        this.hueMod += random(-hueShift, hueShift);
        this.hueMod = constrain(this.hueMod, -0.1, 0.1);

        this.angle += this.angleMod * angleIncr;
        this.angle = constrain(this.angle, -PI, PI);
        this.z += noiseSpeed;
      }
      render() {
        let hue = this.hue + this.hueMod;
        if (hue < 0) hue += 1;
        if (hue > 1) hue -= 1;
        push();
        translate(this.x, this.y);
        rotate(this.angle + this.dir);
        translate(0, -ribbonWidth / 2);
        beginShape();
        stroke(hue, 1, 1, walkingSpeed / 10);
        // strokeWeight(walkingSpeed/10);
        noFill();
        for (let i = 0; i < ribbonWidth; i++) {
          let n = noise(i * noiseScale, this.z * noiseScale);
          n -= 0.5;
          n *= noiseHeight;
          vertex(n, i);
        }
        endShape();
        pop();
      }
    }

    function setup() {
      pixelDensity(1);
      createCanvas();
      blendMode(ADD);
      colorMode(HSB, 1, 1, 1);
      windowResized();
    }

    let walkers;

    function init() {
      clear();
      background(0);
      steps = 0;
      walkers = [];

      let hue = random();
      for (let i = 0; i < numRibbons; i++) {
        walkers.push(
          new Walker(random(width), random(height), hue + random(-0.1, 0.1)),
        );
      }
    }

    function draw() {
      if (steps < maxSteps) {
        for (let i = 0; i < stepsPerFrame; i++) {
          walkers.map((w) => {
            w.update();
            w.render();
          });
          steps++;
        }
      }
    }

    function mousePressed() {
      init();
    }

    function windowResized() {
      resizeCanvas(windowWidth, windowHeight);
      init();
    }
  </script>
