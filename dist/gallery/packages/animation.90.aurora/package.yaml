version: v1
metadata:
  name: Icelandic Aurora
  description: Watch the aurora borealis dance across your screen.
  author: Ibz
  source: https://github.com/ibz0q/lovelace-bg-animation
  tags:
    - interactive
parameters:
  - name: speed
    default: 0.5
    description: Animation movement speed
    type: number
    helper: number(0.1-2)
    behavior: environment
  - name: blurIntensity
    default: 60
    description: Intensity of the blur effect (10-100)
    type: number
    behavior: environment
  - name: colorIntensity
    default: 0.7
    description: Intensity of colors (0.3-1.0)
    type: number
    behavior: environment
  - name: targetFPS
    default: 60
    description: Target frames per second
    type: number
    behavior: environment
    helper: number(10-100)
  - name: controlsVisible
    default: false
    description: Show controls by default
    type: boolean
    behavior: environment
  - name: animationTimeout
    default: 5000
    description: Time in milliseconds before animation stops (0 for no timeout)
    type: number
    behavior: environment
  - name: enableAnimationTimeout
    default: true
    description: Enable/disable animation timeout feature
    type: boolean
    behavior: environment
helpers:
  insert_baseurl: true
template: >
  <!DOCTYPE html>

  <html lang="en">
    <head>
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>Mac Gradient Background Generator</title>
      <style>
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }

        body,
        html {
          height: 100%;
          overflow: hidden;
          background: #000;
        }

        canvas {
          display: block;
          width: 100vw;
          height: 100vh;
        }

        .ui-container {
          transition:
            opacity 0.5s ease,
            visibility 0.5s ease;
          opacity: 0;
          visibility: hidden;
          pointer-events: none;
        }

        .ui-container.visible {
          opacity: 1;
          visibility: visible;
          pointer-events: auto;
        }

        .controls {
          position: fixed;
          top: 20px;
          right: 20px;
          z-index: 100;
          background: rgba(255, 255, 255, 0.1);
          backdrop-filter: blur(10px);
          border-radius: 12px;
          padding: 20px;
          color: white;
          font-family:
            -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
          font-size: 14px;
          border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .toggle-button {
          position: fixed;
          top: 20px;
          right: 20px;
          z-index: 101;
          background: rgba(255, 255, 255, 0.15);
          backdrop-filter: blur(10px);
          border: 1px solid rgba(255, 255, 255, 0.3);
          color: white;
          width: 44px;
          height: 44px;
          border-radius: 22px;
          cursor: pointer;
          font-size: 18px;
          display: flex;
          align-items: center;
          justify-content: center;
          transition: all 0.3s ease;
          font-family:
            -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
        }

        .toggle-button:hover {
          background: rgba(255, 255, 255, 0.25);
          transform: scale(1.05);
        }

        .toggle-button.controls-visible {
          transform: translateX(-280px);
        }

        .control-group {
          margin-bottom: 15px;
        }

        .control-group:last-child {
          margin-bottom: 0;
        }

        label {
          display: block;
          margin-bottom: 5px;
          font-weight: 500;
        }

        input[type="range"] {
          width: 100%;
          margin-bottom: 5px;
        }

        button {
          background: rgba(255, 255, 255, 0.2);
          border: 1px solid rgba(255, 255, 255, 0.3);
          color: white;
          padding: 8px 16px;
          border-radius: 6px;
          cursor: pointer;
          font-size: 12px;
          margin-right: 8px;
          margin-bottom: 8px;
        }

        button:hover {
          background: rgba(255, 255, 255, 0.3);
        }

        .keyboard-hint {
          position: fixed;
          bottom: 20px;
          left: 20px;
          z-index: 100;
          background: rgba(255, 255, 255, 0.1);
          backdrop-filter: blur(10px);
          border-radius: 8px;
          padding: 12px 16px;
          color: white;
          font-family:
            -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
          font-size: 12px;
          border: 1px solid rgba(255, 255, 255, 0.2);
          opacity: 0.7;
          transition: opacity 0.3s ease;
        }

        .keyboard-hint:hover {
          opacity: 1;
        }
      </style>
    </head>
    <body>
      <canvas id="gradientCanvas"></canvas>

      <div class="ui-container" id="uiContainer">
        <button
          class="toggle-button controls-visible"
          id="toggleButton"
          title="Hide Controls (H)"
        >
          ⚙️
        </button>

        <div class="controls" id="controlPanel">
          <div class="control-group">
            <label>Animation Speed</label>
            <input
              type="range"
              id="speedControl"
              min="0.1"
              max="2"
              step="0.1"
              value="0.5"
            />
          </div>

          <div class="control-group">
            <label>Blur Intensity</label>
            <input
              type="range"
              id="blurControl"
              min="10"
              max="100"
              step="5"
              value="40"
            />
          </div>

          <div class="control-group">
            <label>Color Intensity</label>
            <input
              type="range"
              id="intensityControl"
              min="0.3"
              max="1"
              step="0.1"
              value="0.7"
            />
          </div>

          <div class="control-group">
            <button onclick="randomizeColors()">Randomize Colors</button>
            <button onclick="saveImage()">Save Image</button>
          </div>
        </div>
      </div>

      <script>
        class GradientGenerator {
          constructor() {
            this.canvas = document.getElementById("gradientCanvas");
            this.ctx = this.canvas.getContext("2d");
            this.animationId = null;
            this.time = 0;

            // Animation settings
            this.speed = window.env?.speed ?? 0.05;
            this.blurIntensity = window.env?.blurIntensity ?? 40;
            this.colorIntensity = window.env?.colorIntensity ?? 0.7;

            // Performance optimization
            this.lastFrameTime = 0;
            this.targetFPS = window.env?.targetFPS ?? 60;
            this.frameInterval = 1000 / this.targetFPS;

            // Animation timeout feature for CPU saving
            this.animationTimeout = window.env?.animationTimeout ?? 3000; // 3 seconds by default
            this.animationStartTime = 0;
            this.isAnimating = true;
            this.enableAnimationTimeout =
              window.env?.enableAnimationTimeout ?? true; // Flag to enable/disable timeout

            // UI state
            this.controlsVisible = window.env?.controlsVisible ?? false;

            // Generate random gradient streaks on each load
            this.gradientStreaks = this.generateRandomStreaks();

            // Pre-calculate static values for performance
            this.preCalculateStaticValues();

            this.init();
            this.setupEventListeners();
            this.setupControlToggle();
            this.initializeUIState();
            this.animate();
          }

          generateRandomStreaks() {
            const baseColors = [
              [138, 43, 226], // Purple
              [75, 0, 130], // Indigo
              [0, 191, 255], // Deep Sky Blue
              [72, 61, 139], // Dark Slate Blue
              [123, 104, 238], // Medium Slate Blue
              [0, 206, 209], // Dark Turquoise
              [147, 0, 211], // Dark Violet
              [30, 144, 255], // Dodger Blue
              [106, 90, 205], // Slate Blue
              [0, 255, 255], // Cyan
            ];

            const streaks = [];
            const numStreaks = 6 + Math.floor(Math.random() * 3); // 6-8 streaks

            for (let i = 0; i < numStreaks; i++) {
              streaks.push({
                x: Math.random(), // Random X position (0-1)
                y: Math.random(), // Random Y position (0-1)
                angle: Math.random() * 360, // Random initial angle
                length: 2.0 + Math.random() * 2.0, // Random length (2.0-4.0)
                width: 0.8 + Math.random() * 1.5, // Random width (0.8-2.3)
                color: baseColors[Math.floor(Math.random() * baseColors.length)], // Random color from palette
                speed: 0.5 + Math.random() * 1.0, // Random speed (0.5-1.5)
                angleSpeed: 0.2 + Math.random() * 0.4, // Random rotation speed (0.2-0.6)
                // Pre-calculated values for performance
                speedFactor: 0,
                angleSpeedFactor: 0,
                colorCache: null,
              });
            }

            return streaks;
          }

          preCalculateStaticValues() {
            // Pre-calculate speed factors to avoid repeated multiplication
            this.gradientStreaks.forEach((streak) => {
              streak.speedFactor = streak.speed * 0.001;
              streak.angleSpeedFactor = streak.angleSpeed * 0.001;

              // Pre-calculate color values
              const [r, g, b] = streak.color;
              const intensity = this.colorIntensity;
              streak.colorCache = {
                r: Math.floor(r * intensity),
                g: Math.floor(g * intensity),
                b: Math.floor(b * intensity),
                r07: Math.floor(r * intensity * 0.7),
                g07: Math.floor(g * intensity * 0.7),
                b07: Math.floor(b * intensity * 0.7),
                r01: Math.floor(r * intensity * 0.1),
                g01: Math.floor(g * intensity * 0.1),
                b01: Math.floor(b * intensity * 0.1),
              };
            });
          }

          init() {
            this.resizeCanvas();
            window.addEventListener("resize", () => this.resizeCanvas());

            // Optimize canvas context
            this.ctx.imageSmoothingEnabled = true;
            this.ctx.imageSmoothingQuality = "high";
          }

          resizeCanvas() {
            this.canvas.width = window.innerWidth;
            this.canvas.height = window.innerHeight;
            this.preCalculateStaticValues(); // Recalculate on resize
          }

          setupEventListeners() {
            document
              .getElementById("speedControl")
              .addEventListener("input", (e) => {
                this.speed = parseFloat(e.target.value);
              });

            document
              .getElementById("blurControl")
              .addEventListener("input", (e) => {
                this.blurIntensity = parseInt(e.target.value);
              });

            document
              .getElementById("intensityControl")
              .addEventListener("input", (e) => {
                this.colorIntensity = parseFloat(e.target.value);
                this.preCalculateStaticValues(); // Recalculate colors when intensity changes
              });

            // Click anywhere on the canvas to regenerate gradients (like page reload)
            this.canvas.addEventListener("click", (e) => {
              this.regenerateGradients();
            });
          }

          setupControlToggle() {
            const toggleButton = document.getElementById("toggleButton");
            const uiContainer = document.getElementById("uiContainer");

            // Click event for toggle button
            toggleButton.addEventListener("click", () => {
              this.toggleControls();
            });

            // Keyboard event for 'H' key
            document.addEventListener("keydown", (e) => {
              if (
                e.key.toLowerCase() === "h" &&
                !e.ctrlKey &&
                !e.metaKey &&
                !e.altKey
              ) {
                e.preventDefault();
                this.toggleControls();
              }
            });
          }

          toggleControls() {
            const uiContainer = document.getElementById("uiContainer");

            this.controlsVisible = !this.controlsVisible;

            if (this.controlsVisible) {
              // Show all UI elements
              uiContainer.classList.add("visible");
            } else {
              // Hide all UI elements for pure gradient mode
              uiContainer.classList.remove("visible");
            }
          }

          render(currentTime) {
            const { width, height } = this.canvas;

            // Clear canvas efficiently
            this.ctx.clearRect(0, 0, width, height);
            this.ctx.fillStyle = "#000000";
            this.ctx.fillRect(0, 0, width, height);

            // Set blend mode and filter once
            this.ctx.globalCompositeOperation = "screen";
            this.ctx.filter = `blur(${this.blurIntensity}px)`;

            // Pre-calculate common values
            const minDimension = Math.min(width, height);
            const timeSpeed = this.time * this.speed;

            // Draw each gradient streak with optimized calculations
            for (let i = 0; i < this.gradientStreaks.length; i++) {
              this.drawOptimizedStreak(
                this.gradientStreaks[i],
                width,
                height,
                minDimension,
                timeSpeed,
              );
            }

            // Reset context state once
            this.ctx.filter = "none";
            this.ctx.globalCompositeOperation = "source-over";
          }

          drawOptimizedStreak(streak, width, height, minDimension, timeSpeed) {
            // Use pre-calculated values and avoid repeated calculations
            const baseX = streak.x * width;
            const baseY = streak.y * height;

            // Optimized trigonometric calculations
            const offsetX =
              Math.sin(timeSpeed * streak.speedFactor) * width * 0.2;
            const offsetY =
              Math.cos(timeSpeed * streak.speedFactor * 0.8) * height * 0.2;

            const centerX = baseX + offsetX;
            const centerY = baseY + offsetY;

            // Optimized angle calculation
            const currentAngle =
              streak.angle + Math.sin(timeSpeed * streak.angleSpeedFactor) * 45;
            const angleRad = currentAngle * 0.017453292519943295; // Pre-calculated Math.PI / 180

            // Pre-calculated dimensions
            const length = streak.length * minDimension * 0.8;
            const streakWidth = streak.width * minDimension * 0.3;

            // Optimized trigonometric calculations for endpoints
            const cosAngle = Math.cos(angleRad);
            const sinAngle = Math.sin(angleRad);
            const halfLength = length * 0.5;

            const startX = centerX - cosAngle * halfLength;
            const startY = centerY - sinAngle * halfLength;
            const endX = centerX + cosAngle * halfLength;
            const endY = centerY + sinAngle * halfLength;

            // Create gradient with cached colors
            const gradient = this.ctx.createLinearGradient(
              startX,
              startY,
              endX,
              endY,
            );
            const colors = streak.colorCache;

            gradient.addColorStop(
              0,
              `rgba(${colors.r01}, ${colors.g01}, ${colors.b01}, 0)`,
            );
            gradient.addColorStop(
              0.3,
              `rgba(${colors.r07}, ${colors.g07}, ${colors.b07}, 0.4)`,
            );
            gradient.addColorStop(
              0.5,
              `rgba(${colors.r}, ${colors.g}, ${colors.b}, 0.9)`,
            );
            gradient.addColorStop(
              0.7,
              `rgba(${colors.r07}, ${colors.g07}, ${colors.b07}, 0.4)`,
            );
            gradient.addColorStop(
              1,
              `rgba(${colors.r01}, ${colors.g01}, ${colors.b01}, 0)`,
            );

            // Optimized drawing
            this.ctx.save();
            this.ctx.translate(centerX, centerY);
            this.ctx.rotate(angleRad);

            this.ctx.beginPath();
            this.ctx.ellipse(
              0,
              0,
              length * 0.6,
              streakWidth,
              0,
              0,
              6.283185307179586,
            ); // Pre-calculated Math.PI * 2
            this.ctx.fillStyle = gradient;
            this.ctx.fill();

            this.ctx.restore();
          }

          animate(currentTime = 0) {
            // Initialize start time on first frame
            if (this.animationStartTime === 0) {
              this.animationStartTime = currentTime;
            }

            // Check if animation should stop due to timeout
            if (this.enableAnimationTimeout && this.isAnimating) {
              const elapsedTime = currentTime - this.animationStartTime;
              if (elapsedTime >= this.animationTimeout) {
                this.isAnimating = false;
                console.log(
                  `Animation stopped after ${this.animationTimeout}ms to save CPU`,
                );
                // Render one final frame and stop
                this.render(currentTime);
                return; // Stop the animation loop
              }
            }

            // Only continue animating if still within timeout or timeout is disabled
            if (this.isAnimating || !this.enableAnimationTimeout) {
              // Frame rate limiting for consistent performance
              if (currentTime - this.lastFrameTime >= this.frameInterval) {
                this.time += this.speed * 16;
                this.render(currentTime);
                this.lastFrameTime = currentTime;
              }

              this.animationId = requestAnimationFrame((time) =>
                this.animate(time),
              );
            }
          }

          regenerateGradients() {
            // Generate completely new random streaks (like page reload)
            this.gradientStreaks = this.generateRandomStreaks();
            this.preCalculateStaticValues();
            this.time = 0; // Reset animation time for fresh start

            // Restart animation if it was stopped
            this.isAnimating = true;
            this.animationStartTime = 0; // Reset start time

            // If animation was stopped, restart it
            if (!this.animationId) {
              this.animate();
            }
          }

          randomizeColors() {
            // Use the same method as regenerateGradients for consistency
            this.regenerateGradients();
          }

          saveImage() {
            const link = document.createElement("a");
            link.download = `gradient-background-${Date.now()}.png`;
            link.href = this.canvas.toDataURL();
            link.click();
          }

          // Animation timeout control methods
          setAnimationTimeout(milliseconds) {
            this.animationTimeout = milliseconds;
            console.log(`Animation timeout set to ${milliseconds}ms`);
          }

          enableTimeout(enable = true) {
            this.enableAnimationTimeout = enable;
            if (enable) {
              console.log("Animation timeout enabled");
            } else {
              console.log(
                "Animation timeout disabled - will animate indefinitely",
              );
              // If timeout was disabled and animation was stopped, restart it
              if (!this.isAnimating) {
                this.isAnimating = true;
                this.animationStartTime = 0;
                if (!this.animationId) {
                  this.animate();
                }
              }
            }
          }

          restartAnimation() {
            this.isAnimating = true;
            this.animationStartTime = 0;
            this.time = 0;
            if (!this.animationId) {
              this.animate();
            }
            console.log("Animation restarted");
          }

          stopAnimation() {
            this.isAnimating = false;
            if (this.animationId) {
              cancelAnimationFrame(this.animationId);
              this.animationId = null;
            }
            console.log("Animation stopped manually");
          }

          initializeUIState() {
            const uiContainer = document.getElementById("uiContainer");

            if (this.controlsVisible) {
              uiContainer.classList.add("visible");
            }
          }
        }

        // Global functions for button controls
        function randomizeColors() {
          if (window.gradientGenerator) {
            window.gradientGenerator.randomizeColors();
          }
        }

        function saveImage() {
          if (window.gradientGenerator) {
            window.gradientGenerator.saveImage();
          }
        }

        // Initialize the gradient generator when the page loads
        window.addEventListener("DOMContentLoaded", () => {
          window.gradientGenerator = new GradientGenerator();

          // Ensure UI state is properly initialized after DOM is ready
          if (window.gradientGenerator.controlsVisible) {
            const uiContainer = document.getElementById("uiContainer");
            if (uiContainer) {
              uiContainer.classList.add("visible");
            }
          }
        });
      </script>
    </body>
  </html>
